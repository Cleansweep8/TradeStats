/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TradeStats;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

public class Producer {

    private static final Logger log = LoggerFactory.getLogger(Producer.class);
    private static final String TOPIC = "trades";

    public static void main(String[] args) {
        Properties props = new Properties();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "http://localhost:9092,http://localhost:9093,http://localhost:9094");
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        KafkaProducer<String, String> producer = new KafkaProducer<>(props);

        try {
            // Load the CSV file from the resources folder
            InputStream inputStream = Producer.class.getClassLoader().getResourceAsStream("commodity_trade_statistics_data.csv");
            if (inputStream == null) {
                throw new IOException("File not found: " + "commodity_trade_statistics_data.csv");
            }
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));

            String headerLine = reader.readLine();
            List<String> headers = parseCSVLine(headerLine);
            String line;
            // Read CSV file line by line
            while ((line = reader.readLine()) != null) {
                // Publish each line as JSON to Kafka topic
                producer.send(new ProducerRecord<>(TOPIC, null, lineToJSON(headers, line)));
                System.out.println("Sent message: " + line);
            }

            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            producer.flush();
            producer.close();
        }
        System.out.println("successfully produced all messages to: " + TOPIC);
    }

    private static List<String> parseCSVLine(String line) {
        List<String> fields = new ArrayList<>();
        StringBuilder field = new StringBuilder();
        boolean insideQuotes = false;
        for (char c : line.toCharArray()) {
            if (c == ',' && !insideQuotes) {
                fields.add(field.toString());
                field.setLength(0); // Clear the StringBuilder
            } else if (c == '"') {
                insideQuotes = !insideQuotes;
            } else {
                field.append(c);
            }
        }
        fields.add(field.toString()); // Add the last field
        return fields;
    }

    // Convert CSV line to JSON format
    private static String lineToJSON(List<String> headers, String line) {
        // Split CSV line by comma
        String[] fields = line.split(",");
        // Form JSON object with dynamic header names
        StringBuilder jsonBuilder = new StringBuilder("{");
        for (int i = 0; i < Math.min(headers.size(), fields.length); i++) {
            if (i > 0) {
                jsonBuilder.append(", ");
            }
            jsonBuilder.append("\"").append(headers.get(i)).append("\": \"").append(fields[i]).append("\"");
        }
        jsonBuilder.append("}");
        return jsonBuilder.toString();
    }
}
